def ALEPlot(model, X, select_feature, grid_resolution=50):
    #get grid value
    grid_step = (X[:, select_feature].max()-X[:, select_feature].min())/grid_resolution
    grid = list(np.arange(X[:, select_feature].min(), X[:, select_feature].max(), grid_step))
    grid.append(X[:, select_feature].max())
    
    #sort the select_feature in ascending order
    X_copy = X.copy()
    X_sorted = X_copy[X_copy[:, select_feature].argsort()]
    
    #split the training data according to grid value
    split_at = X_sorted[:, select_feature].searchsorted(grid[1:-1])
    X_splited = np.split(X_sorted, split_at)
    
    #loop over splitted data and calculate average difference
    ale = []
    final_grid = []
    ale_i = 0
    for i in range(len(X_splited)):
        if X_splited[i].shape[0] == 0:
            continue
        else:
            final_grid.append(grid[i+1])
            X_interval = X_splited[i]
            X_interval_upper = X_interval.copy()
            X_interval_lower = X_interval.copy()
            X_interval_upper[:, select_feature] = grid[i+1]
            X_interval_lower[:, select_feature] = grid[i]
            pred_upper = model.predict(X_interval_upper)
            pred_lower = model.predict(X_interval_lower)
            diff = (pred_upper - pred_lower)/grid_step
            ave_diff = diff.mean()
            ale_i += ave_diff
            ale.append(ale_i)
    
    return final_grid, ale
